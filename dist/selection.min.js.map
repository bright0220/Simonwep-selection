{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/utils.js","webpack:///./src/selection.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","eventListener","method","elements","events","fn","options","HTMLCollection","NodeList","Array","from","isArray","element","event","capture","slice","arguments","on","off","unitify","val","unit","css","el","attr","style","entries","intersects","a","b","bxc","left","width","byc","top","height","right","bottom","Error","selectAll","selector","doc","document","nodes","length","item","push","querySelectorAll","defaultView","HTMLElement","eventPath","evt","path","composedPath","target","parentElement","removeElement","arr","index","indexOf","splice","simplifyEvent","tap","touches","x","clientX","y","clientY","abs","max","min","round","ceil","Math","preventDefault","e","Selection","that","assign","class","tapMode","startThreshold","singleClick","disableTouch","selectables","scrollSpeedDivider","manualScrollSpeed","startareas","boundaries","selectionAreaContainer","_stored","_selectables","_selected","_changed","added","removed","_eventListener","beforestart","start","move","stop","_area","createElement","_clippingElement","_scrollAvailable","_scrollSpeed","_init","appendChild","classList","add","willChange","position","overflow","transform","pointerEvents","zIndex","enable","_bindStartEvents","type","_onTapStart","passive","targetBoundingClientRect","getBoundingClientRect","startAreas","_boundaries","_targetContainer","find","evtpath","includes","_emit","_ax1","_ay1","_ax2","_ay2","_singleClick","clearSelection","_delayedTapMove","_onTapStop","_onSingleTap","spl","resolveSelectables","v","stored","shiftKey","reference","preceding","following","compareDocumentPosition","rangeItems","filter","select","removeFromSelection","thresholdType","_onTapMove","tb","_targetBoundary","scrollHeight","scrollWidth","_manualScroll","contains","marginTop","marginLeft","scon","ss","_redrawArea","_updatedTouchingElements","requestAnimationFrame","scroll","scrollTop","scrollLeft","deltaY","deltaX","clientHeight","clientWidth","brect","x3","y3","x4","y4","noevent","remove","areaRect","touched","node","ok","listener","inst","area","selected","concat","changed","oe","cb","callBacks","keepSelection","store","getSelection","cancel","keepEvent","option","undefined","disable","destroy","query","utils","version"],"mappings":"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","file":"selection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Selection\"] = factory();\n\telse\n\t\troot[\"Selection\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* eslint-disable prefer-rest-params */\nfunction eventListener(method, elements, events, fn, options = {}) {\n\n    // Normalize array\n    if (elements instanceof HTMLCollection || elements instanceof NodeList) {\n        elements = Array.from(elements);\n    } else if (!Array.isArray(elements)) {\n        elements = [elements];\n    }\n\n    if (!Array.isArray(events)) {\n        events = [events];\n    }\n\n    for (const element of elements) {\n        for (const event of events) {\n            element[method](event, fn, {capture: false, ...options});\n        }\n    }\n\n    return Array.prototype.slice.call(arguments, 1);\n}\n\n/**\n * Add event(s) to element(s).\n * @param elements DOM-Elements\n * @param events Event names\n * @param fn Callback\n * @param options Optional options\n * @return Array passed arguments\n */\nexport const on = eventListener.bind(null, 'addEventListener');\n\n/**\n * Remove event(s) from element(s).\n * @param elements DOM-Elements\n * @param events Event names\n * @param fn Callback\n * @param options Optional options\n * @return Array passed arguments\n */\nexport const off = eventListener.bind(null, 'removeEventListener');\n\nconst unitify = (val, unit = 'px') => typeof val === 'number' ? val + unit : val;\n\n/**\n * Add css to a DOM-Element or returns the current\n * value of a property.\n *\n * @param el The Element.\n * @param attr The attribute or a object which holds css key-properties.\n * @param val The value for a single attribute.\n * @returns {*}\n */\nexport function css(el, attr, val) {\n    const style = el && el.style;\n    if (style) {\n        if (typeof attr === 'object') {\n\n            for (const [key, value] of Object.entries(attr)) {\n                style[key] = unitify(value);\n            }\n\n        } else if (val && typeof attr === 'string') {\n            style[attr] = unitify(val);\n        }\n    }\n}\n\n/**\n * Check if two DOM-Elements intersects each other.\n * @param a BoundingClientRect of the first element.\n * @param b BoundingClientRect of the second element.\n * @param mode Options are center, cover or touch.\n * @returns {boolean} If both elements intersects each other.\n */\nexport function intersects(a, b, mode) {\n    switch (mode || 'touch') {\n        case 'center': {\n            const bxc = b.left + b.width / 2;\n            const byc = b.top + b.height / 2;\n\n            return bxc >= a.left\n                && bxc <= a.right\n                && byc >= a.top\n                && byc <= a.bottom;\n        }\n        case 'cover': {\n            return b.left >= a.left\n                && b.top >= a.top\n                && b.right <= a.right\n                && b.bottom <= a.bottom;\n        }\n        case 'touch': {\n            return a.right >= b.left\n                && a.left <= b.right\n                && a.bottom >= b.top\n                && a.top <= b.bottom;\n        }\n        default: {\n            throw new Error(`Unkown intersection mode: ${mode}`);\n        }\n    }\n}\n\n/**\n * Takes a selector (or array of selectors) and returns the matched nodes.\n * @param selector The selector or an Array of selectors.\n * @returns {Array} Array of DOM-Nodes.\n */\nexport function selectAll(selector, doc = document) {\n    if (!Array.isArray(selector)) {\n        selector = [selector];\n    }\n\n    const nodes = [];\n    for (let i = 0, l = selector.length; i < l; i++) {\n        const item = selector[i];\n\n        if (typeof item === 'string') {\n            nodes.push(...doc.querySelectorAll(item));\n        } else if (item instanceof doc.defaultView.HTMLElement) {\n            nodes.push(item);\n        }\n    }\n\n    return nodes;\n}\n\n/**\n * Polyfill for safari & firefox for the eventPath event property.\n * @param evt The event object.\n * @return [String] event path.\n */\nexport function eventPath(evt) {\n    let path = evt.path || (evt.composedPath && evt.composedPath());\n\n    if (path) {\n        return path;\n    }\n\n    let el = evt.target;\n    for (path = [el]; (el = el.parentElement);) {\n        path.push(el);\n    }\n\n    path.push(document, window);\n    return path;\n}\n\n/**\n * Removes an element from an Array.\n */\nexport function removeElement(arr, el) {\n    const index = arr.indexOf(el);\n\n    if (~index) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function simplifyEvent(evt) {\n    const tap = (evt.touches && evt.touches[0] || evt);\n    return {\n        tap,\n        x: tap.clientX,\n        y: tap.clientY,\n        target: tap.target\n    };\n}\n","import {css, eventPath, intersects, off, on, removeElement, selectAll, simplifyEvent} from './utils';\nimport {version}                                                                      from '../package';\n\n// Some var shorting for better compression and readability\nconst {abs, max, min, round, ceil} = Math;\nconst doc = document;\nconst preventDefault = e => e.preventDefault();\n\nfunction Selection(options = {}) {\n\n    const that = {\n\n        options: Object.assign({\n            class: 'selection-area',\n            document: doc,\n            mode: 'touch',\n            tapMode: 'native',\n            startThreshold: 10,\n            singleClick: true,\n            disableTouch: false,\n\n            selectables: [],\n            scrollSpeedDivider: 10,\n            manualScrollSpeed: 750,\n\n            startareas: ['html'],\n            boundaries: ['html'],\n            selectionAreaContainer: 'body'\n        }, options),\n\n        // Store for keepSelection\n        _stored: [],\n        _selectables: [],\n        _selected: [], // Currently touched elements\n        _changed: {\n            added: [],  // Added elements since last selection\n            removed: [] // Removed elements since last selection\n        },\n\n        // Evenlistener name: [callbacks]\n        _eventListener: {\n            beforestart: [],\n            start: [],\n            move: [],\n            stop: []\n        },\n\n        // Create area element\n        _area: doc.createElement('div'),\n        _clippingElement: doc.createElement('div'),\n\n        // Is getting set on movement. Varied.\n        _scrollAvailable: true,\n        _scrollSpeed: {x: null, y: null},\n\n        _init() {\n            that._clippingElement.appendChild(that._area);\n\n            // Add class to the area element\n            that._area.classList.add(that.options.class);\n\n            // Apply basic styles to the area element\n            css(that._area, {\n                willChange: 'top, left, bottom, right, width, height',\n                top: 0,\n                left: 0,\n                position: 'fixed'\n            });\n\n            css(that._clippingElement, {\n                overflow: 'hidden',\n                position: 'fixed',\n                transform: 'translate3d(0, 0, 0)', // https://stackoverflow.com/a/38268846\n                pointerEvents: 'none',\n                zIndex: '1'\n            });\n\n            that.enable();\n        },\n\n        _bindStartEvents(type) {\n            const fn = type === 'on' ? on : off;\n            fn(that.options.document, 'mousedown', that._onTapStart);\n\n            if (!that.options.disableTouch) {\n                fn(that.options.document, 'touchstart', that._onTapStart, {\n                    passive: false\n                });\n            }\n        },\n\n        _onTapStart(evt) {\n            const {x, y, target} = simplifyEvent(evt);\n            const targetBoundingClientRect = target.getBoundingClientRect();\n\n            // Find start-areas and boundaries\n            const startAreas = selectAll(that.options.startareas, that.options.document);\n            that._boundaries = selectAll(that.options.boundaries, that.options.document);\n\n            // Check in which container the user currently acts\n            that._targetContainer = that._boundaries.find(el =>\n                intersects(el.getBoundingClientRect(), targetBoundingClientRect)\n            );\n\n            // Check if area starts in one of the start areas / boundaries\n            const evtpath = eventPath(evt);\n            if (!that._targetContainer ||\n                !startAreas.find(el => evtpath.includes(el)) ||\n                !that._boundaries.find(el => evtpath.includes(el))) {\n                return;\n            }\n\n            if (that._emit('beforestart', evt) === false) {\n                return;\n            }\n\n            // Area start point\n            that._ax1 = x;\n            that._ay1 = y;\n\n            // Area end point\n            that._ax2 = 0;\n            that._ay2 = 0;\n\n            // To detect single-click\n            that._singleClick = true;\n            that._selected = [];\n            that.clearSelection(false);\n\n            // Prevent default select event\n            on(that.options.document, 'selectstart', preventDefault);\n\n            // Add listener\n            on(that.options.document, ['touchmove', 'mousemove'], that._delayedTapMove, {passive: false});\n            on(that.options.document, ['mouseup', 'touchcancel', 'touchend'], that._onTapStop);\n\n            // Firefox will scroll down the page which would break the selection.\n            evt.preventDefault();\n        },\n\n        _onSingleTap(evt) {\n            const {tapMode} = that.options;\n            const spl = simplifyEvent(evt);\n            let target = null;\n\n            if (tapMode === 'native') {\n                target = spl.target;\n            } else if (tapMode === 'touch') {\n                that.resolveSelectables();\n\n                const {x, y} = spl;\n                target = that._selectables.find(v => {\n                    const {right, left, top, bottom} = v.getBoundingClientRect();\n                    return x < right && x > left && y < bottom && y > top;\n                });\n            } else {\n                throw new Error(`Unknown tapMode option: ${tapMode}`);\n            }\n\n            if (!target) {\n                return false;\n            }\n\n            /**\n             * Resolve selectables again.\n             * If the user starded in a scrollable area they will be reduced\n             * to the current area. Prevent the exclusion of these if a range-selection\n             * gets performed.\n             */\n            that.resolveSelectables();\n\n            // Traverse dom upwards to check if target is selectable\n            while (!that._selectables.includes(target)) {\n                if (!target.parentElement) {\n                    return;\n                }\n\n                target = target.parentElement;\n            }\n\n            that._emit('start', evt);\n            const stored = that._stored;\n            if (evt.shiftKey && stored.length) {\n                const reference = stored[stored.length - 1];\n\n                // Resolve correct range\n                const [preceding, following] = reference.compareDocumentPosition(target) & 4 ? [target, reference] : [reference, target];\n\n                const rangeItems = [...that._selectables.filter(el =>\n                    (el.compareDocumentPosition(preceding) & 4) &&\n                    (el.compareDocumentPosition(following) & 2)\n                ), target];\n\n                that.select(rangeItems);\n                that._emit('move', evt);\n                that._emit('stop', evt);\n            } else {\n\n                if (that._stored.includes(target)) {\n                    that.removeFromSelection(target);\n                } else {\n                    that.select(target);\n                }\n\n                that._emit('move', evt);\n                that._emit('stop', evt);\n            }\n        },\n\n        _delayedTapMove(evt) {\n            const {x, y} = simplifyEvent(evt);\n            const {startThreshold} = that.options;\n            const {_ax1, _ay1} = that; // Coordinates of first \"tap\"\n\n            // Check pixel threshold\n            const thresholdType = typeof startThreshold;\n            if ((thresholdType === 'number' && abs((x + y) - (_ax1 + _ay1)) >= startThreshold) ||\n                (thresholdType === 'object' && abs(x - _ax1) >= startThreshold.x || abs(y - _ay1) >= startThreshold.y)) {\n                off(that.options.document, ['mousemove', 'touchmove'], that._delayedTapMove, {passive: false});\n                on(that.options.document, ['mousemove', 'touchmove'], that._onTapMove, {passive: false});\n\n                // Make area element visible\n                css(that._area, 'display', 'block');\n\n                // Apppend selection-area to the dom\n                selectAll(that.options.selectionAreaContainer, that.options.document)[0].appendChild(that._clippingElement);\n\n                // Now after the threshold is reached resolve all selectables\n                that.resolveSelectables();\n\n                // An action is recognized as single-select until the user performed a mutli-selection\n                that._singleClick = false;\n\n                // Just saving the boundaries of this container for later\n                const tb = that._targetBoundary = that._targetContainer.getBoundingClientRect();\n\n                // Find container and check if it's scrollable\n                if (round(that._targetContainer.scrollHeight) !== round(tb.height) ||\n                    round(that._targetContainer.scrollWidth) !== round(tb.width)) {\n\n                    // Indenticates if the user is currently in a scrollable area\n                    that._scrollAvailable = true;\n\n                    // Detect mouse scrolling\n                    on(window, 'wheel', that._manualScroll, {passive: false});\n\n                    /**\n                     * The selection-area will also cover other element which are\n                     * out of the current scrollable parent. So find all elements\n                     * which are in the current scrollable element. Later these are\n                     * the only selectables instead of all.\n                     */\n                    that._selectables = that._selectables.filter(s => that._targetContainer.contains(s));\n\n                    /**\n                     * To clip the area, the selection area has a parent\n                     * which has exact the same dimensions as the scrollable elemeent.\n                     * Now if the area exeeds these boundaries it will be cropped.\n                     */\n                    css(that._clippingElement, {\n                        top: tb.top,\n                        left: tb.left,\n                        width: tb.width,\n                        height: tb.height\n                    });\n\n                    /**\n                     * The area element is relative to the clipping element,\n                     * but when this is moved or transformed we need to correct\n                     * the positions via a negative margin.\n                     */\n                    css(that._area, {\n                        marginTop: -tb.top,\n                        marginLeft: -tb.left\n                    });\n                } else {\n                    that._scrollAvailable = false;\n\n                    /**\n                     * Reset margin and clipping element dimensions.\n                     */\n                    css(that._clippingElement, {\n                        top: 0,\n                        left: 0,\n                        width: '100%',\n                        height: '100%'\n                    });\n\n                    css(that._area, {\n                        marginTop: 0,\n                        marginLeft: 0\n                    });\n                }\n\n                // Trigger recalc and fire event\n                that._onTapMove(evt);\n                that._emit('start', evt);\n            }\n\n            evt.preventDefault(); // Prevent swipe-down refresh\n        },\n\n        _onTapMove(evt) {\n            const {x, y} = simplifyEvent(evt);\n            const {scrollSpeedDivider} = that.options;\n            const scon = that._targetContainer;\n            let ss = that._scrollSpeed;\n            that._ax2 = x;\n            that._ay2 = y;\n\n            if (that._scrollAvailable && (ss.y !== null || ss.x !== null)) {\n\n                // Continous scrolling\n                requestAnimationFrame(function scroll() {\n\n                    // Make sure that ss is not outdated\n                    ss = that._scrollSpeed;\n\n                    // Scrolling is not anymore required\n                    if (ss.y === null && ss.x === null) {\n                        return;\n                    }\n\n                    /**\n                     * If the value exeeds the scrollable area it will\n                     * be set to the max / min value. So change only\n                     */\n                    const {scrollTop, scrollLeft} = scon;\n\n                    // Reduce velocity, use ceil in both directions to scroll at least 1px per frame\n                    if (ss.y !== null) {\n                        scon.scrollTop += ceil(ss.y / scrollSpeedDivider);\n                        that._ay1 -= scon.scrollTop - scrollTop;\n                    }\n\n                    if (ss.x !== null) {\n                        scon.scrollLeft += ceil(ss.x / scrollSpeedDivider);\n                        that._ax1 -= scon.scrollLeft - scrollLeft;\n                    }\n\n                    /**\n                     * We changed the start coordinates ->  redraw the selectiona area\n                     * We changed the dimensions of the area element -> re-calc selected elements\n                     * The selected elements array has been changed -> fire event\n                     */\n                    that._redrawArea();\n                    that._updatedTouchingElements();\n                    that._emit('move', evt);\n\n                    // Keep scrolling even if the user stops to move his pointer\n                    requestAnimationFrame(scroll);\n                });\n            } else {\n\n                /**\n                 * Perform redraw only if scrolling is not active.\n                 * If scrolling is active this area is getting re-dragwed by the\n                 * anonymized scroll function.\n                 */\n                that._redrawArea();\n                that._updatedTouchingElements();\n                that._emit('move', evt);\n            }\n\n            evt.preventDefault(); // Prevent swipe-down refresh\n        },\n\n        _manualScroll(evt) {\n            const {manualScrollSpeed} = that.options;\n\n            // Consistent scrolling speed on all browsers\n            const deltaY = evt.deltaY ? (evt.deltaY > 0 ? 1 : -1) : 0;\n            const deltaX = evt.deltaX ? (evt.deltaX > 0 ? 1 : -1) : 0;\n            that._scrollSpeed.y += deltaY * manualScrollSpeed;\n            that._scrollSpeed.x += deltaX * manualScrollSpeed;\n            that._onTapMove(evt);\n\n            // Prevent defaul scrolling behaviour, eg. page scrolling\n            evt.preventDefault();\n        },\n\n        _redrawArea() {\n            const {scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth} = that._targetContainer;\n            const brect = that._targetBoundary;\n            const ss = that._scrollSpeed;\n            let x = that._ax2;\n            let y = that._ay2;\n\n            if (x < brect.left) {\n                ss.x = scrollLeft ? -abs(brect.left - x) : null;\n                x = brect.left;\n            } else if (x > brect.left + brect.width) {\n                ss.x = scrollWidth - scrollLeft - clientWidth ? abs(brect.left + brect.width - x) : null;\n                x = brect.left + brect.width;\n            } else {\n                ss.x = null;\n            }\n\n            if (y < brect.top) {\n                ss.y = scrollTop ? -abs(brect.top - y) : null;\n                y = brect.top;\n            } else if (y > brect.top + brect.height) {\n                ss.y = scrollHeight - scrollTop - clientHeight ? abs(brect.top + brect.height - y) : null;\n                y = brect.top + brect.height;\n            } else {\n                ss.y = null;\n            }\n\n            const x3 = min(that._ax1, x);\n            const y3 = min(that._ay1, y);\n            const x4 = max(that._ax1, x);\n            const y4 = max(that._ay1, y);\n\n            Object.assign(that._area.style, {\n                top: `${y3}px`,\n                left: `${x3}px`,\n                width: `${x4 - x3}px`,\n                height: `${y4 - y3}px`\n            });\n        },\n\n        _onTapStop(evt, noevent) {\n\n            // Remove event handlers\n            off(that.options.document, ['mousemove', 'touchmove'], that._delayedTapMove);\n            off(that.options.document, ['touchmove', 'mousemove'], that._onTapMove);\n            off(that.options.document, ['mouseup', 'touchcancel', 'touchend'], that._onTapStop);\n\n            if (evt && that._singleClick && that.options.singleClick) {\n                that._onSingleTap(evt);\n            } else if (!that._singleClick && !noevent) {\n                that._updatedTouchingElements();\n                that._emit('stop', evt);\n            }\n\n            // Reset scroll speed\n            that._scrollSpeed = {x: null, y: null};\n\n            // Unbind mouse scrolling listener\n            off(window, 'wheel', that._manualScroll);\n\n            // Remove selection-area from dom\n            that._clippingElement.remove();\n\n            // Enable default select event\n            off(that.options.document, 'selectstart', preventDefault);\n            css(that._area, 'display', 'none');\n        },\n\n        _updatedTouchingElements() {\n            const {_selected, _selectables, _area, options} = that;\n            const {mode} = options;\n            const areaRect = _area.getBoundingClientRect();\n\n            // Update\n            const touched = [];\n            const added = [];\n            const removed = [];\n\n            // Itreate over the selectable elements\n            for (let i = 0; i < _selectables.length; i++) {\n                const node = _selectables[i];\n\n                // Check if area intersects element\n                if (intersects(areaRect, node.getBoundingClientRect(), mode)) {\n\n                    // Check if the element wasn't present in the last selection.\n                    if (!_selected.includes(node)) {\n                        added.push(node);\n                    }\n\n                    touched.push(node);\n                }\n            }\n\n            // Check which elements where removed since last selection\n            for (let i = 0; i < _selected.length; i++) {\n                const el = _selected[i];\n                if (!touched.includes(el)) {\n                    removed.push(el);\n                }\n            }\n\n            // Save\n            that._selected = touched;\n            that._changed = {added, removed};\n        },\n\n        _emit(event, evt) {\n            let ok = true;\n\n            for (const listener of that._eventListener[event]) {\n                ok = listener.call(that, {\n                    inst: that,\n                    area: that._area,\n                    selected: that._selected.concat(that._stored),\n                    changed: that._changed,\n                    oe: evt\n                }) && ok;\n            }\n\n            return ok;\n        },\n\n        /**\n         * Adds an eventlistener\n         * @param event\n         * @param cb\n         */\n        on(event, cb) {\n            that._eventListener[event].push(cb);\n            return that;\n        },\n\n        /**\n         * Removes an event listener\n         * @param event\n         * @param cb\n         */\n        off(event, cb) {\n            const callBacks = that._eventListener[event];\n\n            if (callBacks) {\n                const index = callBacks.indexOf(cb);\n\n                if (~index) {\n                    callBacks.splice(index, 1);\n                }\n            }\n\n            return that;\n        },\n\n        /**\n         * Can be used if during a selection elements have been added.\n         * Will update everything which can be selected.\n         */\n        resolveSelectables() {\n\n            // Resolve selectors\n            that._selectables = selectAll(that.options.selectables, that.options.document);\n        },\n\n        /**\n         * Saves the current selection for the next selecion.\n         * Allows multiple selections.\n         */\n        keepSelection() {\n            const {_selected, _stored} = that;\n\n            for (let i = 0; i < _selected.length; i++) {\n                const el = _selected[i];\n                if (!_stored.includes(el)) {\n                    _stored.push(el);\n                }\n            }\n        },\n\n        /**\n         * Clear the elements which where saved by 'keepSelection()'.\n         * @param store If the store should also get cleared\n         */\n        clearSelection(store = true) {\n            store && (that._stored = []);\n            that._selected = [];\n            that._changed.added = [];\n            that._changed.removed = [];\n        },\n\n        /**\n         * Removes an particular element from the selection.\n         */\n        removeFromSelection(el) {\n            that._changed.removed.push(el);\n            removeElement(that._stored, el);\n            removeElement(that._selected, el);\n        },\n\n        /**\n         * @returns {Array} Selected elements\n         */\n        getSelection() {\n            return that._stored;\n        },\n\n        /**\n         * Cancel the current selection process.\n         * @param keepEvent {boolean} true to fire the onStop listener after cancel.\n         */\n        cancel(keepEvent = false) {\n            that._onTapStop(null, !keepEvent);\n        },\n\n        /**\n         * Set or get an option.\n         * @param   {string} name\n         * @param   {*}      value\n         * @return  {*}      the new value\n         */\n        option(name, value) {\n            const {options} = that;\n            return value === undefined ? options[name] : (options[name] = value);\n        },\n\n        /**\n         * Disable the selection functinality.\n         */\n        disable() {\n            that._bindStartEvents('off');\n        },\n\n        /**\n         * Unbinds all events and removes the area-element\n         */\n        destroy() {\n            that.disable();\n            that._clippingElement.remove();\n        },\n\n        /**\n         * Disable the selection functinality.\n         */\n        enable() {\n            that._bindStartEvents('on');\n        },\n\n        /**\n         * Manually select elements\n         * @param query - CSS Query, can be an array of queries\n         */\n        select(query) {\n            const {_selected, _stored} = that;\n            const elements = selectAll(query, that.options.document).filter(el =>\n                !_selected.includes(el) &&\n                !_stored.includes(el)\n            );\n\n            that._selected.push(...elements);\n            that._changed.added.push(...elements);\n            return elements;\n        }\n    };\n\n    // Initialize\n    that._init();\n\n    return that;\n}\n\n// Export utils\nSelection.utils = {\n    on,\n    off,\n    css,\n    intersects,\n    selectAll,\n    eventPath,\n    removeElement\n};\n\n/**\n * Create selection instance\n * @param {Object} [options]\n */\nSelection.create = options => Selection(options);\n\n// Set version and export\nSelection.version = version;\nexport default Selection;\n"],"sourceRoot":""}
