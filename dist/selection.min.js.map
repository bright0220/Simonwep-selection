{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/utils.js","webpack:///./src/selection.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","eventListener","method","elements","events","fn","options","HTMLCollection","NodeList","Array","from","isArray","element","event","capture","slice","arguments","on","off","unitify","val","unit","css","el","attr","style","entries","intersects","a","b","bxc","left","width","byc","top","height","right","bottom","Error","selectAll","selector","doc","document","nodes","length","item","push","querySelectorAll","defaultView","HTMLElement","eventPath","evt","path","composedPath","target","parentElement","removeElement","arr","index","indexOf","splice","simplifyEvent","tap","touches","x","clientX","y","clientY","abs","max","min","round","ceil","Math","preventDefault","e","DOMRect","ClientRect","Selection","that","assign","class","frame","tapMode","startThreshold","singleClick","disableTouch","selectables","scrollSpeedDivider","manualScrollSpeed","startareas","boundaries","selectionAreaContainer","_stored","_selectables","_selected","_changed","added","removed","_eventListener","beforestart","start","move","stop","_area","_areaDomRect","_clippingElement","_scrollAvailable","_scrollSpeed","_init","createElement","appendChild","classList","add","willChange","position","overflow","transform","pointerEvents","zIndex","enable","_bindStartEvents","type","_onTapStart","passive","silent","targetBoundingClientRect","getBoundingClientRect","startAreas","_boundaries","_targetContainer","find","evtpath","includes","_emit","_ax1","_ay1","_ax2","_ay2","_singleClick","clearSelection","_delayedTapMove","_onTapStop","_onSingleTap","spl","resolveSelectables","v","stored","shiftKey","reference","preceding","following","compareDocumentPosition","rangeItems","filter","select","removeFromSelection","thresholdType","_onTapMove","tb","_targetBoundary","scrollHeight","scrollWidth","_manualScroll","contains","marginTop","marginLeft","scon","ss","_reacalcAreaRect","_updatedTouchingElements","_redrawArea","requestAnimationFrame","scroll","scrollY","scrollX","scrollTop","scrollLeft","deltaY","deltaX","clientHeight","clientWidth","brect","x3","y3","x4","y4","areaStyle","noevent","remove","touched","node","ok","listener","inst","area","selected","concat","changed","oe","trigger","cb","callBacks","keepSelection","store","getSelection","cancel","keepEvent","option","undefined","disable","destroy","query","utils","version"],"mappings":"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","file":"selection.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Selection\"] = factory();\n\telse\n\t\troot[\"Selection\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/* eslint-disable prefer-rest-params */\r\nfunction eventListener(method, elements, events, fn, options = {}) {\r\n\r\n    // Normalize array\r\n    if (elements instanceof HTMLCollection || elements instanceof NodeList) {\r\n        elements = Array.from(elements);\r\n    } else if (!Array.isArray(elements)) {\r\n        elements = [elements];\r\n    }\r\n\r\n    if (!Array.isArray(events)) {\r\n        events = [events];\r\n    }\r\n\r\n    for (const element of elements) {\r\n        for (const event of events) {\r\n            element[method](event, fn, {capture: false, ...options});\r\n        }\r\n    }\r\n\r\n    return Array.prototype.slice.call(arguments, 1);\r\n}\r\n\r\n/**\r\n * Add event(s) to element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const on = eventListener.bind(null, 'addEventListener');\r\n\r\n/**\r\n * Remove event(s) from element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\r\nexport const off = eventListener.bind(null, 'removeEventListener');\r\n\r\nconst unitify = (val, unit = 'px') => typeof val === 'number' ? val + unit : val;\r\n\r\n/**\r\n * Add css to a DOM-Element or returns the current\r\n * value of a property.\r\n *\r\n * @param el The Element.\r\n * @param attr The attribute or a object which holds css key-properties.\r\n * @param val The value for a single attribute.\r\n * @returns {*}\r\n */\r\nexport function css(el, attr, val) {\r\n    const style = el && el.style;\r\n    if (style) {\r\n        if (typeof attr === 'object') {\r\n\r\n            for (const [key, value] of Object.entries(attr)) {\r\n                style[key] = unitify(value);\r\n            }\r\n\r\n        } else if (val && typeof attr === 'string') {\r\n            style[attr] = unitify(val);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Check if two DOM-Elements intersects each other.\r\n * @param a BoundingClientRect of the first element.\r\n * @param b BoundingClientRect of the second element.\r\n * @param mode Options are center, cover or touch.\r\n * @returns {boolean} If both elements intersects each other.\r\n */\r\nexport function intersects(a, b, mode) {\r\n    switch (mode || 'touch') {\r\n        case 'center': {\r\n            const bxc = b.left + b.width / 2;\r\n            const byc = b.top + b.height / 2;\r\n\r\n            return bxc >= a.left &&\r\n                bxc <= a.right &&\r\n                byc >= a.top &&\r\n                byc <= a.bottom;\r\n        }\r\n        case 'cover': {\r\n            return b.left >= a.left &&\r\n                b.top >= a.top &&\r\n                b.right <= a.right &&\r\n                b.bottom <= a.bottom;\r\n        }\r\n        case 'touch': {\r\n            return a.right >= b.left &&\r\n                a.left <= b.right &&\r\n                a.bottom >= b.top &&\r\n                a.top <= b.bottom;\r\n        }\r\n        default: {\r\n            throw new Error(`Unkown intersection mode: ${mode}`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Takes a selector (or array of selectors) and returns the matched nodes.\r\n * @param selector The selector or an Array of selectors.\r\n * @returns {Array} Array of DOM-Nodes.\r\n */\r\nexport function selectAll(selector, doc = document) {\r\n    if (!Array.isArray(selector)) {\r\n        selector = [selector];\r\n    }\r\n\r\n    const nodes = [];\r\n    for (let i = 0, l = selector.length; i < l; i++) {\r\n        const item = selector[i];\r\n\r\n        if (typeof item === 'string') {\r\n            nodes.push(...doc.querySelectorAll(item));\r\n        } else if (item instanceof doc.defaultView.HTMLElement) {\r\n            nodes.push(item);\r\n        }\r\n    }\r\n\r\n    return nodes;\r\n}\r\n\r\n/**\r\n * Polyfill for safari & firefox for the eventPath event property.\r\n * @param evt The event object.\r\n * @return [String] event path.\r\n */\r\nexport function eventPath(evt) {\r\n    let path = evt.path || (evt.composedPath && evt.composedPath());\r\n\r\n    if (path && path.length > 0) {\r\n        return path;\r\n    }\r\n\r\n    let el = evt.target;\r\n    for (path = [el]; (el = el.parentElement);) {\r\n        path.push(el);\r\n    }\r\n\r\n    path.push(document, window);\r\n    return path;\r\n}\r\n\r\n/**\r\n * Removes an element from an Array.\r\n */\r\nexport function removeElement(arr, el) {\r\n    const index = arr.indexOf(el);\r\n\r\n    if (~index) {\r\n        arr.splice(index, 1);\r\n    }\r\n}\r\n\r\nexport function simplifyEvent(evt) {\r\n    const tap = (evt.touches && evt.touches[0] || evt);\r\n    return {\r\n        tap,\r\n        x: tap.clientX,\r\n        y: tap.clientY,\r\n        target: tap.target\r\n    };\r\n}\r\n","import {css, eventPath, intersects, off, on, removeElement, selectAll, simplifyEvent} from './utils';\r\nimport {version} from '../package';\r\n\r\n// Some var shorting for better compression and readability\r\nconst {abs, max, min, round, ceil} = Math;\r\nconst preventDefault = e => e.preventDefault();\r\n\r\n// Edge < 79 uses the unofficial name ClienRect\r\nconst DOMRect = typeof window.DOMRect === 'undefined' ? window.ClientRect : window.DOMRect;\r\n\r\n/* eslint-disable new-cap */\r\nfunction Selection(options = {}) {\r\n\r\n    const that = {\r\n\r\n        options: Object.assign({\r\n            class: 'selection-area',\r\n            frame: document,\r\n            mode: 'touch',\r\n            tapMode: 'native',\r\n            startThreshold: 10,\r\n            singleClick: true,\r\n            disableTouch: false,\r\n\r\n            selectables: [],\r\n            scrollSpeedDivider: 10,\r\n            manualScrollSpeed: 750,\r\n\r\n            startareas: ['html'],\r\n            boundaries: ['html'],\r\n            selectionAreaContainer: 'body'\r\n        }, options),\r\n\r\n        // Store for keepSelection\r\n        _stored: [],\r\n        _selectables: [],\r\n        _selected: [], // Currently touched elements\r\n        _changed: {\r\n            added: [], // Added elements since last selection\r\n            removed: [] // Removed elements since last selection\r\n        },\r\n\r\n        // Evenlistener name: [callbacks]\r\n        _eventListener: {\r\n            beforestart: [],\r\n            start: [],\r\n            move: [],\r\n            stop: []\r\n        },\r\n\r\n        // Create area element\r\n        _area: null,\r\n        _areaDomRect: null, // Caches the position of the selection-area\r\n        _clippingElement: null,\r\n\r\n        // Is getting set on movement. Varied.\r\n        _scrollAvailable: true,\r\n        _scrollSpeed: {x: null, y: null},\r\n\r\n        _init() {\r\n            const {frame} = that.options;\r\n            that._area = frame.createElement('div');\r\n            that._clippingElement = frame.createElement('div');\r\n            that._clippingElement.appendChild(that._area);\r\n\r\n            // Add class to the area element\r\n            that._area.classList.add(that.options.class);\r\n\r\n            // Apply basic styles to the area element\r\n            css(that._area, {\r\n                willChange: 'top, left, bottom, right, width, height',\r\n                top: 0,\r\n                left: 0,\r\n                position: 'fixed'\r\n            });\r\n\r\n            css(that._clippingElement, {\r\n                overflow: 'hidden',\r\n                position: 'fixed',\r\n                transform: 'translate3d(0, 0, 0)', // https://stackoverflow.com/a/38268846\r\n                pointerEvents: 'none',\r\n                zIndex: '1'\r\n            });\r\n\r\n            that.enable();\r\n        },\r\n\r\n        _bindStartEvents(type) {\r\n            const {frame} = that.options;\r\n            const fn = type === 'on' ? on : off;\r\n            fn(frame, 'mousedown', that._onTapStart);\r\n\r\n            if (!that.options.disableTouch) {\r\n                fn(frame, 'touchstart', that._onTapStart, {\r\n                    passive: false\r\n                });\r\n            }\r\n        },\r\n\r\n        _onTapStart(evt, silent = false) {\r\n            const {x, y, target} = simplifyEvent(evt);\r\n            const {startareas, boundaries, frame} = that.options;\r\n            const targetBoundingClientRect = target.getBoundingClientRect();\r\n\r\n            // Find start-areas and boundaries\r\n            const startAreas = selectAll(startareas, frame);\r\n            that._boundaries = selectAll(boundaries, frame);\r\n\r\n            // Check in which container the user currently acts\r\n            that._targetContainer = that._boundaries.find(el =>\r\n                intersects(el.getBoundingClientRect(), targetBoundingClientRect)\r\n            );\r\n\r\n            // Check if area starts in one of the start areas / boundaries\r\n            const evtpath = eventPath(evt);\r\n            if (!that._targetContainer ||\r\n                !startAreas.find(el => evtpath.includes(el)) ||\r\n                !that._boundaries.find(el => evtpath.includes(el))) {\r\n                return;\r\n            }\r\n\r\n            if (!silent && that._emit('beforestart', evt) === false) {\r\n                return;\r\n            }\r\n\r\n            // Area start point\r\n            that._ax1 = x;\r\n            that._ay1 = y;\r\n\r\n            // Area end point\r\n            that._ax2 = 0;\r\n            that._ay2 = 0;\r\n\r\n            // To detect single-click\r\n            that._singleClick = true;\r\n            that.clearSelection(false);\r\n\r\n            // Prevent default select event\r\n            on(frame, 'selectstart', preventDefault);\r\n\r\n            // Add listener\r\n            on(frame, ['touchmove', 'mousemove'], that._delayedTapMove, {passive: false});\r\n            on(frame, ['mouseup', 'touchcancel', 'touchend'], that._onTapStop);\r\n\r\n            // Firefox will scroll down the page which would break the selection.\r\n            evt.preventDefault();\r\n        },\r\n\r\n        _onSingleTap(evt) {\r\n            const {tapMode} = that.options;\r\n            const spl = simplifyEvent(evt);\r\n            let target = null;\r\n\r\n            if (tapMode === 'native') {\r\n                target = spl.target;\r\n            } else if (tapMode === 'touch') {\r\n                that.resolveSelectables();\r\n\r\n                const {x, y} = spl;\r\n                target = that._selectables.find(v => {\r\n                    const {right, left, top, bottom} = v.getBoundingClientRect();\r\n                    return x < right && x > left && y < bottom && y > top;\r\n                });\r\n            } else {\r\n                throw new Error(`Unknown tapMode option: ${tapMode}`);\r\n            }\r\n\r\n            if (!target) {\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * Resolve selectables again.\r\n             * If the user starded in a scrollable area they will be reduced\r\n             * to the current area. Prevent the exclusion of these if a range-selection\r\n             * gets performed.\r\n             */\r\n            that.resolveSelectables();\r\n\r\n            // Traverse dom upwards to check if target is selectable\r\n            while (!that._selectables.includes(target)) {\r\n                if (!target.parentElement) {\r\n                    return;\r\n                }\r\n\r\n                target = target.parentElement;\r\n            }\r\n\r\n            that._emit('start', evt);\r\n            const stored = that._stored;\r\n            if (evt.shiftKey && stored.length) {\r\n                const reference = stored[stored.length - 1];\r\n\r\n                // Resolve correct range\r\n                const [preceding, following] = reference.compareDocumentPosition(target) & 4 ? [target, reference] : [reference, target];\r\n\r\n                const rangeItems = [...that._selectables.filter(el =>\r\n                    (el.compareDocumentPosition(preceding) & 4) &&\r\n                    (el.compareDocumentPosition(following) & 2)\r\n                ), target];\r\n\r\n                that.select(rangeItems);\r\n                that._emit('move', evt);\r\n                that._emit('stop', evt);\r\n            } else {\r\n\r\n                if (that._stored.includes(target)) {\r\n                    that.removeFromSelection(target);\r\n                } else {\r\n                    that.select(target);\r\n                }\r\n\r\n                that._emit('move', evt);\r\n                that._emit('stop', evt);\r\n            }\r\n        },\r\n\r\n        _delayedTapMove(evt) {\r\n            const {x, y} = simplifyEvent(evt);\r\n            const {startThreshold, frame} = that.options;\r\n            const {_ax1, _ay1} = that; // Coordinates of first \"tap\"\r\n\r\n            // Check pixel threshold\r\n            const thresholdType = typeof startThreshold;\r\n            if ((thresholdType === 'number' && abs((x + y) - (_ax1 + _ay1)) >= startThreshold) ||\r\n                (thresholdType === 'object' && abs(x - _ax1) >= startThreshold.x || abs(y - _ay1) >= startThreshold.y)) {\r\n                off(frame, ['mousemove', 'touchmove'], that._delayedTapMove, {passive: false});\r\n                on(frame, ['mousemove', 'touchmove'], that._onTapMove, {passive: false});\r\n\r\n                // Make area element visible\r\n                css(that._area, 'display', 'block');\r\n\r\n                // Apppend selection-area to the dom\r\n                selectAll(that.options.selectionAreaContainer, frame)[0].appendChild(that._clippingElement);\r\n\r\n                // Now after the threshold is reached resolve all selectables\r\n                that.resolveSelectables();\r\n\r\n                // An action is recognized as single-select until the user performed a mutli-selection\r\n                that._singleClick = false;\r\n\r\n                // Just saving the boundaries of this container for later\r\n                const tb = that._targetBoundary = that._targetContainer.getBoundingClientRect();\r\n\r\n                // Find container and check if it's scrollable\r\n                if (round(that._targetContainer.scrollHeight) !== round(tb.height) ||\r\n                    round(that._targetContainer.scrollWidth) !== round(tb.width)) {\r\n\r\n                    // Indenticates if the user is currently in a scrollable area\r\n                    that._scrollAvailable = true;\r\n\r\n                    // Detect mouse scrolling\r\n                    on(window, 'wheel', that._manualScroll, {passive: false});\r\n\r\n                    /**\r\n                     * The selection-area will also cover other element which are\r\n                     * out of the current scrollable parent. So find all elements\r\n                     * which are in the current scrollable element. Later these are\r\n                     * the only selectables instead of all.\r\n                     */\r\n                    that._selectables = that._selectables.filter(s => that._targetContainer.contains(s));\r\n\r\n                    /**\r\n                     * To clip the area, the selection area has a parent\r\n                     * which has exact the same dimensions as the scrollable elemeent.\r\n                     * Now if the area exeeds these boundaries it will be cropped.\r\n                     */\r\n                    css(that._clippingElement, {\r\n                        top: tb.top,\r\n                        left: tb.left,\r\n                        width: tb.width,\r\n                        height: tb.height\r\n                    });\r\n\r\n                    /**\r\n                     * The area element is relative to the clipping element,\r\n                     * but when this is moved or transformed we need to correct\r\n                     * the positions via a negative margin.\r\n                     */\r\n                    css(that._area, {\r\n                        marginTop: -tb.top,\r\n                        marginLeft: -tb.left\r\n                    });\r\n                } else {\r\n                    that._scrollAvailable = false;\r\n\r\n                    /**\r\n                     * Reset margin and clipping element dimensions.\r\n                     */\r\n                    css(that._clippingElement, {\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: '100%',\r\n                        height: '100%'\r\n                    });\r\n\r\n                    css(that._area, {\r\n                        marginTop: 0,\r\n                        marginLeft: 0\r\n                    });\r\n                }\r\n\r\n                // Trigger recalc and fire event\r\n                that._onTapMove(evt);\r\n                that._emit('start', evt);\r\n            }\r\n\r\n            evt.preventDefault(); // Prevent swipe-down refresh\r\n        },\r\n\r\n        _onTapMove(evt) {\r\n            const {x, y} = simplifyEvent(evt);\r\n            const {scrollSpeedDivider} = that.options;\r\n            const scon = that._targetContainer;\r\n            let ss = that._scrollSpeed;\r\n            that._ax2 = x;\r\n            that._ay2 = y;\r\n\r\n            if (that._scrollAvailable && (ss.y !== null || ss.x !== null)) {\r\n\r\n                // Continous scrolling\r\n                requestAnimationFrame(function scroll() {\r\n\r\n                    // Make sure that ss is not outdated\r\n                    ss = that._scrollSpeed;\r\n                    const scrollY = ss.y !== null;\r\n                    const scrollX = ss.x !== null;\r\n\r\n                    // Scrolling is not anymore required\r\n                    if (!scrollY && !scrollX) {\r\n                        return;\r\n                    }\r\n\r\n                    /**\r\n                     * If the value exeeds the scrollable area it will\r\n                     * be set to the max / min value. So change only\r\n                     */\r\n                    const {scrollTop, scrollLeft} = scon;\r\n\r\n                    // Reduce velocity, use ceil in both directions to scroll at least 1px per frame\r\n                    if (scrollY) {\r\n                        scon.scrollTop += ceil(ss.y / scrollSpeedDivider);\r\n                        that._ay1 -= scon.scrollTop - scrollTop;\r\n                    }\r\n\r\n                    if (scrollX) {\r\n                        scon.scrollLeft += ceil(ss.x / scrollSpeedDivider);\r\n                        that._ax1 -= scon.scrollLeft - scrollLeft;\r\n                    }\r\n\r\n                    /**\r\n                     * We changed the start coordinates -> redraw the selectiona area\r\n                     * We changed the dimensions of the area element -> re-calc selected elements\r\n                     * The selected elements array has been changed -> fire event\r\n                     */\r\n                    that._reacalcAreaRect();\r\n                    that._updatedTouchingElements();\r\n                    that._emit('move', evt);\r\n                    that._redrawArea();\r\n\r\n                    // Keep scrolling even if the user stops to move his pointer\r\n                    requestAnimationFrame(scroll);\r\n                });\r\n            } else {\r\n\r\n                /**\r\n                 * Perform redraw only if scrolling is not active.\r\n                 * If scrolling is active this area is getting re-dragwed by the\r\n                 * anonymized scroll function.\r\n                 */\r\n                that._reacalcAreaRect();\r\n                that._updatedTouchingElements();\r\n                that._emit('move', evt);\r\n                that._redrawArea();\r\n            }\r\n\r\n            evt.preventDefault(); // Prevent swipe-down refresh\r\n        },\r\n\r\n        _manualScroll(evt) {\r\n            const {manualScrollSpeed} = that.options;\r\n\r\n            // Consistent scrolling speed on all browsers\r\n            const deltaY = evt.deltaY ? (evt.deltaY > 0 ? 1 : -1) : 0;\r\n            const deltaX = evt.deltaX ? (evt.deltaX > 0 ? 1 : -1) : 0;\r\n            that._scrollSpeed.y += deltaY * manualScrollSpeed;\r\n            that._scrollSpeed.x += deltaX * manualScrollSpeed;\r\n            that._onTapMove(evt);\r\n\r\n            // Prevent defaul scrolling behaviour, eg. page scrolling\r\n            evt.preventDefault();\r\n        },\r\n\r\n        _reacalcAreaRect() {\r\n            const {scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth} = that._targetContainer;\r\n            const brect = that._targetBoundary;\r\n            const ss = that._scrollSpeed;\r\n            let x = that._ax2;\r\n            let y = that._ay2;\r\n\r\n            if (x < brect.left) {\r\n                ss.x = scrollLeft ? -abs(brect.left - x) : null;\r\n                x = brect.left;\r\n            } else if (x > brect.left + brect.width) {\r\n                ss.x = scrollWidth - scrollLeft - clientWidth ? abs(brect.left + brect.width - x) : null;\r\n                x = brect.left + brect.width;\r\n            } else {\r\n                ss.x = null;\r\n            }\r\n\r\n            if (y < brect.top) {\r\n                ss.y = scrollTop ? -abs(brect.top - y) : null;\r\n                y = brect.top;\r\n            } else if (y > brect.top + brect.height) {\r\n                ss.y = scrollHeight - scrollTop - clientHeight ? abs(brect.top + brect.height - y) : null;\r\n                y = brect.top + brect.height;\r\n            } else {\r\n                ss.y = null;\r\n            }\r\n\r\n            const x3 = min(that._ax1, x);\r\n            const y3 = min(that._ay1, y);\r\n            const x4 = max(that._ax1, x);\r\n            const y4 = max(that._ay1, y);\r\n            that._areaDomRect = new DOMRect(x3, y3, x4 - x3, y4 - y3);\r\n        },\r\n\r\n        _redrawArea() {\r\n            const {x, y, width, height} = that._areaDomRect;\r\n            const areaStyle = that._area.style;\r\n\r\n            // It's generally faster to not use es6-templates\r\n            // It's also faster to manually change the properties instead of calling Object.assign\r\n            /* eslint prefer-template: \"off\" */\r\n            areaStyle.transform = 'translate3d(' + x + 'px,' + y + 'px, 0)';\r\n            areaStyle.width = width + 'px';\r\n            areaStyle.height = height + 'px';\r\n        },\r\n\r\n        _onTapStop(evt, noevent) {\r\n            const {frame, singleClick} = that.options;\r\n\r\n            // Remove event handlers\r\n            off(frame, ['mousemove', 'touchmove'], that._delayedTapMove);\r\n            off(frame, ['touchmove', 'mousemove'], that._onTapMove);\r\n            off(frame, ['mouseup', 'touchcancel', 'touchend'], that._onTapStop);\r\n\r\n            if (evt && that._singleClick && singleClick) {\r\n                that._onSingleTap(evt);\r\n            } else if (!that._singleClick && !noevent) {\r\n                that._updatedTouchingElements();\r\n                that._emit('stop', evt);\r\n            }\r\n\r\n            // Reset scroll speed\r\n            that._scrollSpeed = {x: null, y: null};\r\n\r\n            // Unbind mouse scrolling listener\r\n            off(window, 'wheel', that._manualScroll);\r\n\r\n            // Remove selection-area from dom\r\n            that._clippingElement.remove();\r\n\r\n            // Enable default select event\r\n            off(frame, 'selectstart', preventDefault);\r\n            css(that._area, 'display', 'none');\r\n        },\r\n\r\n        _updatedTouchingElements() {\r\n            const {_selected, _selectables, options, _areaDomRect} = that;\r\n            const {mode} = options;\r\n\r\n            // Update\r\n            const touched = [];\r\n            const added = [];\r\n            const removed = [];\r\n\r\n            // Itreate over the selectable elements\r\n            for (let i = 0; i < _selectables.length; i++) {\r\n                const node = _selectables[i];\r\n\r\n                // Check if area intersects element\r\n                if (intersects(_areaDomRect, node.getBoundingClientRect(), mode)) {\r\n\r\n                    // Check if the element wasn't present in the last selection.\r\n                    if (!_selected.includes(node)) {\r\n                        added.push(node);\r\n                    }\r\n\r\n                    touched.push(node);\r\n                }\r\n            }\r\n\r\n            // Check which elements where removed since last selection\r\n            for (let i = 0; i < _selected.length; i++) {\r\n                const el = _selected[i];\r\n                if (!touched.includes(el)) {\r\n                    removed.push(el);\r\n                }\r\n            }\r\n\r\n            // Save\r\n            that._selected = touched;\r\n            that._changed = {added, removed};\r\n        },\r\n\r\n        _emit(event, evt) {\r\n            let ok = true;\r\n\r\n            for (const listener of that._eventListener[event]) {\r\n                ok = listener.call(that, {\r\n                    inst: that,\r\n                    area: that._area,\r\n                    selected: that._selected.concat(that._stored),\r\n                    changed: that._changed,\r\n                    oe: evt\r\n                }) && ok;\r\n            }\r\n\r\n            return ok;\r\n        },\r\n\r\n        /**\r\n         * Manually triggers the start of a selection\r\n         * @param evt A MouseEvent / TouchEvent -like object\r\n         * @param silent If beforestart should be fired,\r\n         */\r\n        trigger(evt, silent = true) {\r\n            that._onTapStart(evt, silent);\r\n        },\r\n\r\n        /**\r\n         * Adds an eventlistener\r\n         * @param event\r\n         * @param cb\r\n         */\r\n        on(event, cb) {\r\n            that._eventListener[event].push(cb);\r\n            return that;\r\n        },\r\n\r\n        /**\r\n         * Removes an event listener\r\n         * @param event\r\n         * @param cb\r\n         */\r\n        off(event, cb) {\r\n            const callBacks = that._eventListener[event];\r\n\r\n            if (callBacks) {\r\n                const index = callBacks.indexOf(cb);\r\n\r\n                if (~index) {\r\n                    callBacks.splice(index, 1);\r\n                }\r\n            }\r\n\r\n            return that;\r\n        },\r\n\r\n        /**\r\n         * Can be used if during a selection elements have been added.\r\n         * Will update everything which can be selected.\r\n         */\r\n        resolveSelectables() {\r\n\r\n            // Resolve selectors\r\n            that._selectables = selectAll(that.options.selectables, that.options.frame);\r\n        },\r\n\r\n        /**\r\n         * Saves the current selection for the next selecion.\r\n         * Allows multiple selections.\r\n         */\r\n        keepSelection() {\r\n            const {_selected, _stored} = that;\r\n\r\n            for (let i = 0; i < _selected.length; i++) {\r\n                const el = _selected[i];\r\n                if (!_stored.includes(el)) {\r\n                    _stored.push(el);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear the elements which where saved by 'keepSelection()'.\r\n         * @param store If the store should also get cleared\r\n         */\r\n        clearSelection(store = true) {\r\n            store && (that._stored = []);\r\n            that._selected = [];\r\n            that._changed.added = [];\r\n            that._changed.removed = [];\r\n        },\r\n\r\n        /**\r\n         * Removes an particular element from the selection.\r\n         */\r\n        removeFromSelection(el) {\r\n            that._changed.removed.push(el);\r\n            removeElement(that._stored, el);\r\n            removeElement(that._selected, el);\r\n        },\r\n\r\n        /**\r\n         * @returns {Array} Selected elements\r\n         */\r\n        getSelection() {\r\n            return that._stored;\r\n        },\r\n\r\n        /**\r\n         * Cancel the current selection process.\r\n         * @param keepEvent {boolean} true to fire the onStop listener after cancel.\r\n         */\r\n        cancel(keepEvent = false) {\r\n            that._onTapStop(null, !keepEvent);\r\n        },\r\n\r\n        /**\r\n         * Set or get an option.\r\n         * @param   {string} name\r\n         * @param   {*}      value\r\n         * @return  {*}      the new value\r\n         */\r\n        option(name, value) {\r\n            const {options} = that;\r\n            return value === undefined ? options[name] : (options[name] = value);\r\n        },\r\n\r\n        /**\r\n         * Disable the selection functinality.\r\n         */\r\n        disable() {\r\n            that._bindStartEvents('off');\r\n        },\r\n\r\n        /**\r\n         * Unbinds all events and removes the area-element\r\n         */\r\n        destroy() {\r\n            that.disable();\r\n            that._clippingElement.remove();\r\n        },\r\n\r\n        /**\r\n         * Disable the selection functinality.\r\n         */\r\n        enable() {\r\n            that._bindStartEvents('on');\r\n        },\r\n\r\n        /**\r\n         * Manually select elements\r\n         * @param query - CSS Query, can be an array of queries\r\n         */\r\n        select(query) {\r\n            const {_selected, _stored, options} = that;\r\n            const elements = selectAll(query, options.frame).filter(el =>\r\n                !_selected.includes(el) &&\r\n                !_stored.includes(el)\r\n            );\r\n\r\n            that._selected.push(...elements);\r\n            that._changed.added.push(...elements);\r\n            return elements;\r\n        }\r\n    };\r\n\r\n    // Initialize\r\n    that._init();\r\n\r\n    return that;\r\n}\r\n\r\n// Export utils\r\nSelection.utils = {\r\n    on,\r\n    off,\r\n    css,\r\n    intersects,\r\n    selectAll,\r\n    eventPath,\r\n    removeElement\r\n};\r\n\r\n/**\r\n * Create selection instance\r\n * @param {Object} [options]\r\n */\r\nSelection.create = options => Selection(options);\r\n\r\n// Set version and export\r\nSelection.version = version;\r\nexport default Selection;\r\n"],"sourceRoot":""}